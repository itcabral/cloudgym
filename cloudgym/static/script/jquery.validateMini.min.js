$.fn.validateMini = function (e = {}) {
    let t = this.find("[validates]"),
        r = !0,
        l = !0,
        a = !0;
    e.useKeyup && (r = r), e.useFocus && (l = l), e.useBlur && (a = a), this.submit(function () {
        let e = !0;
        for (let r = 0; r < t.length; r++) {
            let l = $(t[r]),
                a = s(l.attr("validates"), l.val());
            u(l, a), !0 !== a && (e = !1)
        }
        return e
    }), r && t.keyup(e => {
        let t = $(e.target),
            r = t.attr("validates"),
            l = t.val();
        u(t, s(r, l))
    }), a && t.blur(e => {
        let t = $(e.target),
            r = t.attr("validates"),
            l = t.val();
        u(t, s(r, l))
    }), l && t.focus(e => {
        u($(e.target), -1)
    });
    let n = {
        ...{
            required: (e, t) => "" != t || "value is empty!",
            email: (e, t) => /\S+@\S+\.\S+/.test(t) || "value is not an email!",
            between: (e, t) => {
                let r = e[0],
                    l = e[1],
                    a = t.length;
                return r <= a && a <= l || `value required form ${r} to ${l} character!`
            },
            min: (e, t) => {
                let r = e[0];
                return r <= t.length || `value smaller ${r} character!`
            },
            max: (e, t) => {
                let r = e[0];
                return r >= t.length || `value bigger ${r} character!`
            },
            numeric: (e, t) => !isNaN(t) || "value is not a number!",
            num_min: (e, t) => {
                let r = e[0];
                return r <= parseInt(t) || `value bigger ${r} required!`
            },
            num_max: (e, t) => {
                let r = e[0];
                return r >= parseInt(t) || `value smaller ${r} required!`
            },
            num_between: (e, t) => {
                let r = e[0],
                    l = e[1];
                return r <= (t = parseInt(t)) && t <= l || `value bigger ${r} and smaller ${l} required!`
            },
            same: (e, t) => {
                return $("#" + e[0]).val() === t || `value not match ${e[0]}`
            }
        },
        ...e.validates
    };

    function s(e = null, t = null) {
        if (!e) return !0;
        for (valids = e.split("|"), i = 0; i < valids.length; i++) {
            let e = valids[i].split(":") || null;
            if (!n[e[0]]) continue;
            let r = e[1] ? e[1].split(",") : null,
                l = n[e[0]](r, t);
            if (!0 !== l) return l
        }
        return !0
    }

    function u(e, t) {
        let r = e.parent(),
            l = r.find("div.error-text");
        0 === l.length && (l = $(`<div class="error-text">${t}</div>`)), l.html(t), !0 === t ? (e.removeClass("valid-error"), e.addClass("valid-pass"), l.remove()) : -1 === t ? (e.removeClass("valid-pass"), e.removeClass("valid-error"), l.remove()) : (e.removeClass("valid-pass"), e.addClass("valid-error"), r.append(l[0]))
    }
};
